// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpeedWebAPI.Infrastructure;

namespace SpeedWebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230407042708_MyFirstMigration")]
    partial class MyFirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SpeedWebAPI.Models.SpeedLimit", b =>
                {
                    b.Property<decimal>("Lat")
                        .HasPrecision(18, 10)
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("Lng")
                        .HasPrecision(18, 10)
                        .HasColumnType("decimal(18,10)");

                    b.Property<int?>("ProviderType")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteFlag")
                        .HasColumnType("int");

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<bool?>("IsUpdateSpeed")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<int?>("MinSpeed")
                        .HasColumnType("int");

                    b.Property<bool?>("PointError")
                        .HasColumnType("bit");

                    b.Property<long?>("SegmentID")
                        .HasColumnType("bigint");

                    b.Property<int?>("UpdateCount")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Lat", "Lng", "ProviderType", "Position");

                    b.ToTable("SpeedLimit");
                });

            modelBuilder.Entity("SpeedWebAPI.Models.SpeedLimitPQA.SpeedLimitPQA", b =>
                {
                    b.Property<decimal>("Lat")
                        .HasPrecision(18, 10)
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("Lng")
                        .HasPrecision(18, 10)
                        .HasColumnType("decimal(18,10)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteFlag")
                        .HasColumnType("int");

                    b.Property<int?>("Direction")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUpdSpeedPQA")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpdateSpeed")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<int?>("MinSpeed")
                        .HasColumnType("int");

                    b.Property<bool?>("PointError")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProviderType")
                        .HasColumnType("int");

                    b.Property<string>("RouteType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("STT")
                        .HasColumnType("int");

                    b.Property<long?>("SegmentID")
                        .HasColumnType("bigint");

                    b.Property<int>("SpeedDetect")
                        .HasColumnType("int");

                    b.Property<int>("SpeedGPS")
                        .HasColumnType("int");

                    b.Property<int>("SpeedPQA")
                        .HasColumnType("int");

                    b.Property<int?>("UpdateCount")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Lat", "Lng");

                    b.ToTable("SpeedLimitPQA");
                });
#pragma warning restore 612, 618
        }
    }
}
